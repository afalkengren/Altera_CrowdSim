Kernel execution path:

GOAL: get rid of PAgent <- these are SVM pointers

Entry
computeNewVelocity(__global Agent* agents, __global PAgent* agentsForTree, __global AgentTreeNode* agentTree_, float timeStep)
calls: computeAgentNeighbors(agent, agentsForTree, agentTree_)


void computeAgentNeighbors(__global Agent* agent, __global PAgent *agents, __global AgentTreeNode* agentTree_)
if (agent->maxNeighbors_ > 0) {
    rangeSq = sqr(agent->neighborDist_);
    queryAgentTreeRecursive(agents, agent, agentTree_, &rangeSq, 0);
}
As maxNeighbors are set to the default (10), this conditional always evaluates to true.


queryAgentTreeRecursive(__global PAgent* agents_, __global Agent *agent, __global AgentTreeNode* agentTree_, float* rangeSq, uint node)
calls: insertAgentNeighbor(agent, agents_[i].value, rangeSq)

QUESTION: agents_ is of type Agent** which should just point to the agents_ array? why is it supplied twice? redundancy?
ANSWER: The agents_ array passed to the kernel is simply a buffer that has had the agents_ array copied to it. 
kdTree->agents_ is a pointer to the actual agents_ array. Effectively the same thing, as agents_ is just an array of pointers.
We can actually get rid of this as we do pass the actual array over...

insertAgentNeighbor(__global Agent *thisAgent, __global const Agent *agent, float *rangeSq)
